apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent-traces-metrics
  namespace: {{ .Values.namespace }}
  labels:
    app: grafana-agent-traces-metrics
    name: grafana-agent-traces-metrics
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: grafana-agent-traces-metrics
  template:
    metadata:
      labels:
        app: grafana-agent-traces-metrics
        name: grafana-agent-traces-metrics
    spec:
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: grafana-agent-traces-metrics
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          runAsUser: 0
        args: [
          "-config.expand-env",
          "--config.enable-read-api",
          "--config.file=/etc/agent/agent.yaml",
          "--metrics.wal-directory=/etc/agent/data"
        ]
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
           name: microbs-secrets
        volumeMounts:
        - mountPath: /etc/agent
          name: grafana-agent-traces-metrics
        - name: data
          mountPath: /etc/agent/data
        - name: tmppositions
          mountPath: /tmp/positions
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: data
        emptyDir: {}
      - name: tmppositions
        hostPath:
          path: /tmp/positions
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      - configMap:
          name: grafana-agent-traces-metrics
        name: grafana-agent-traces-metrics
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana-agent-k8s
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana-agent-k8s
  serviceName: grafana-agent-k8s
  template:
    metadata:
      labels:
        name: grafana-agent-k8s
    spec:
      containers:
      - args:
        - -config.file=/etc/agent/agent.yaml
        - -enable-features=integrations-next
        - -server.http.address=0.0.0.0:80
        command:
        - /bin/agent
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
           name: microbs-secrets
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        name: grafana-agent-k8s
        ports:
        - containerPort: 80
          name: http-metrics
        volumeMounts:
        - mountPath: /var/lib/agent
          name: agent-wal
        - mountPath: /etc/agent
          name: grafana-agent-k8s
      serviceAccount: grafana-agent-k8s
      volumes:
      - configMap:
          name: grafana-agent-k8s
        name: grafana-agent-k8s
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: agent-wal
      namespace: default
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grafana-agent-logs
  namespace: {{ .Values.namespace }}
  labels:
    app: grafana-agent-logs
    name: grafana-agent-logs
spec:
  selector:
    matchLabels:
      app: grafana-agent-logs
  template:
    metadata:
      labels:
        app: grafana-agent-logs
        name: grafana-agent-logs
    spec:
      serviceAccountName: grafana-agent-logs
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: grafana-agent-logs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          runAsUser: 0
        args: [
          "-config.expand-env",
          "--config.enable-read-api",
          "--config.file=/etc/agent/agent.yaml",
          "--metrics.wal-directory=/etc/agent/data"
        ]
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
           name: microbs-secrets
        volumeMounts:
        - mountPath: /etc/agent
          name: grafana-agent-logs
        - name: data
          mountPath: /etc/agent/data
        - name: tmppositions
          mountPath: /tmp/positions
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: data
        emptyDir: {}
      - name: tmppositions
        hostPath:
          path: /tmp/positions
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      - configMap:
          name: grafana-agent-logs
        name: grafana-agent-logs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent-redis
  namespace: {{ .Values.namespace }}
  labels:
    app: grafana-agent-redis
    name: grafana-agent-redis
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: grafana-agent-redis
  template:
    metadata:
      labels:
        app: grafana-agent-redis
        name: grafana-agent-redis
    spec:
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: grafana-agent-redis
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        args: [
          "-config.expand-env",
          "--config.enable-read-api",
          "--config.file=/etc/agent/agent.yaml",
          "--metrics.wal-directory=/etc/agent/data"
        ]
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
           name: microbs-secrets
        volumeMounts:
        - mountPath: /etc/agent
          name: grafana-agent-redis
        - name: data
          mountPath: /etc/agent/data
        - name: tmppositions
          mountPath: /tmp/positions
      volumes:
      - name: data
        emptyDir: {}
      - name: tmppositions
        hostPath:
          path: /tmp/positions
      - configMap:
          name: grafana-agent-redis
        name: grafana-agent-redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana-agent-faro
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana-agent-faro
  serviceName: grafana-agent-faro
  template:
    metadata:
      labels:
        name: grafana-agent-faro
    spec:
      containers:
      - args:
        - -config.file=/etc/agent/agent.yaml
        - -enable-features=integrations-next
        command:
        - /bin/agent
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
           name: microbs-secrets
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        name: grafana-agent-faro
        ports:
        - containerPort: 12121
          name: http-metrics
        volumeMounts:
        - mountPath: /var/lib/agent
          name: agent-wal
        - mountPath: /etc/agent
          name: grafana-agent-faro
      serviceAccount: grafana-agent-faro
      volumes:
      - configMap:
          name: grafana-agent-faro
        name: grafana-agent-faro
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: agent-wal
      namespace: default
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi